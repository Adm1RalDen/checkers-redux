{"version":3,"sources":["App/reducer/grid.jsx","App/reducer/index.jsx","App/loginAndAuthorize/login.jsx","App/loginAndAuthorize/registration.jsx","App/game/index.jsx","App/menus/menus.jsx","index.js"],"names":["defaultValue","array","grid","i","j","checkerType","color","click","onDiagonals","renderGrid","diagonals","a1h8","c1h6","c1a3","e1h4","e1a5","g1h2","g1a2","a3f8","a5d8","a7b8","h2b8","h4d8","h6f8","colorReproduced","pressToMove","cutOut","insert","infoChekersForBattle","onlyClickThisCheckers","battleIs","onlyClickFirstCheckersInThis","combineReducers","state","arguments","length","undefined","action","type","Object","objectSpread","value","objectCheckers","selectCheckers","NormalLoginForm","handleSubmit","e","preventDefault","_this","props","form","validateFields","err","values","storage","JSON","parse","localStorage","getItem","some","val","index","email","username","password","isOnline","message","error","setItem","stringify","history","push","handeRegistration","getFieldDecorator","this","react_default","a","createElement","className","es_form","onSubmit","fun","Item","rules","required","input","prefix","icon","style","placeholder","es_button","htmlType","onClick","handeClick","React","Component","WrappedNormalLoginForm","Form","create","name","RegistrationForm","validateFieldsAndScroll","Reg","confirm","success","temp","handleConfirmBlur","target","onChangeConfirmDirty","confirmDirty","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","force","handleBack","goBack","assign","labelCol","xs","span","sm","wrapperCol","label","hasFeedback","validator","Password","onBlur","offset","WrappedRegistrationForm","connect","dispatch","payload","Checkers","transferMove","result","checkAllCheckers","onChangeOnlyClickFirst","onChangeBattleIs","alert","handleClick","tempGrid","checker","flagChose","calculationMovesChecker","tempForBattle","forEach","item","whoBattle","checkersMoveInThis","keys","console","log","onChangeSelectedCheckers","onChangeClickCheckers","filterObject","saveChanges","onChangePressToMove","calculationPossibleMoves","flag","key","key2","result2","moveCheckers","infoBattle","onChangeGridArray","setDiagonals","_loop","_loop2","_loop3","diag","x1","x2","y1","y2","_loop4","checkersLose","onChangeColorReproduced","onChangeInfoCheckersForBattle","object","key1","tempMain","x","y","colorCheckers","colorBattleCheckers","iterat","MoveInThisForBattle","key3","filter","Math","abs","I","J","tempValue","onChangeRenderArray","selectedCheckers","objectValue","App","react_router_dom","react_router","path","exact","component","Login","Game","Registration","store","createStore","reducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","menus","document","getElementById"],"mappings":"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","file":"static/js/main.b76f3423.chunk.js","sourcesContent":["function renderGrid () {\r\n    var grid = {};\r\n    for(var i = 1; i <=12; i++){\r\n        grid[i] = {};\r\n        for(var j = 1; j <=12; j++){\r\n            grid[i][j] = {};\r\n            if(i <=2 || i >= 11 || j <=2 || j>= 11){\r\n                grid[i][j].checkerType = 'noneChecker';\r\n            }else{\r\n                if( (i + j) % 2 === 0){\r\n                    grid[i][j].color = 'white';\r\n                }else{\r\n                    if( i <= 5){\r\n                        grid[i][j].checkerType = 'blackType';\r\n                    }\r\n                    else if( i >=8){\r\n                        grid[i][j].checkerType = 'whiteType';\r\n                    }else{\r\n                        grid[i][j].checkerType = 'none';\r\n                    }\r\n                    grid[i][j].color = 'black';\r\n                    grid[i][j].click = ' ';\r\n                    grid[i][j].onDiagonals = [];\r\n                }\r\n            }\r\n           \r\n        }\r\n    }\r\n    return grid;\r\n}\r\nconst defaultValue = {\r\n    array: renderGrid(),\r\n    diagonals: {\r\n        a1h8: [[10,3], [9,4], [8,5], [7,6], [6,7], [5,8], [4,9], [3,10]],\r\n        c1h6: [[10,5], [9,6], [8,7], [7,8], [6,9], [5,10]],\r\n        c1a3: [[10,5], [9,4], [8,3]],\r\n        e1h4: [[10,7], [9,8], [8,9], [7,10]],\r\n        e1a5: [[10,7], [9,6], [8,5], [7,4], [6,3]],\r\n        g1h2: [[10,9], [9,10]],\r\n        g1a2: [[10,9], [9,8], [8,7], [7,6], [6,5], [5,4], [4,3]],\r\n        a3f8: [[8,3], [7,4], [6,5], [5,6], [4,7], [3,8]],\r\n        a5d8: [[6,3], [5,4], [4,5], [3,6]],\r\n        a7b8: [[4,3], [3,4]],\r\n        h2b8: [[9,10], [8,9], [7,8], [6,7], [5,6], [4,5], [3,4]],\r\n        h4d8: [[7,10], [6,9], [5,8], [4,7], [3,6]],\r\n        h6f8: [[5,10], [4,9], [3,8]]\r\n\r\n    },\r\n    colorReproduced: 'white',\r\n    pressToMove: {\r\n        cutOut: [],\r\n        insert : []\r\n    },\r\n    infoChekersForBattle: [],\r\n    onlyClickThisCheckers: [],\r\n    battleIs: false,\r\n    onlyClickFirstCheckersInThis: []\r\n}\r\nexport default function arrayGrid(state = defaultValue, action) {\r\n    if(action.type === 'CHANGE_ARRAY_GRID'){\r\n        return {\r\n            ...state,\r\n            array: action.array\r\n        }\r\n    }\r\n    if(action.type === 'CHANGE_ONLY_CLICK_FIRST'){\r\n        return {\r\n            ...state,\r\n            onlyClickFirstCheckersInThis: action.array\r\n        }\r\n    }\r\n    if(action.type === 'CHANGE_BATTLE_IS'){\r\n        return {\r\n            ...state,\r\n            battleIs: action.value\r\n        }\r\n    }\r\n    if(action.type === 'CHANGE_INFO_CHECKERS_FOR_BATTLE'){\r\n        return {\r\n            ...state,\r\n            infoChekersForBattle: action.infoChekersForBattle\r\n        }\r\n    }\r\n    if(action.type === 'CHANGE_CLICK_CHECKERS'){\r\n        return {\r\n            ...state,\r\n            onlyClickThisCheckers: action.objectCheckers\r\n        }\r\n    }\r\n    if(action.type === 'CHANGE_COLOR_REPRODUCED'){\r\n        return {\r\n            ...state,\r\n            colorReproduced: action.colorReproduced\r\n        }\r\n    }\r\n    if(action.type === 'CHANGE_RENDER_GRID'){\r\n        return{\r\n            ...state,\r\n            renderGrid: action.array\r\n        }\r\n    }\r\n    if(action.type === 'CHANGE_SELECTED_CHECKERS'){\r\n        // console.log(state.array[action.value[0]][action.value[1]].checkerType);\r\n            return{\r\n            ...state,\r\n            selectCheckers: action.value\r\n            } \r\n    }\r\n    if(action.type === 'CHANGE_PRESS_TO_MOVE'){\r\n        // console.log(state.array[action.value[0]][action.value[1]].checkerType);\r\n            return{\r\n            ...state,\r\n            pressToMove: action.pressToMove,\r\n            } \r\n    }\r\n    return state;\r\n}","import { combineReducers } from 'redux';\r\nimport grid from './grid';\r\n\r\nexport default combineReducers({\r\n    grid\r\n});","\r\nimport React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Form, Icon, Input, Button, message, } from 'antd'; \r\nclass NormalLoginForm extends React.Component {\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.form.validateFields((err, values) => {\r\n      if (!err) {\r\n        let storage = JSON.parse(localStorage.getItem(\"registraion\"));\r\n        if(storage){\r\n          function isAlive(val, index){\r\n            if(val.email === values.username) {\r\n             if(val.password === values.password){\r\n               storage[index].isOnline = true;\r\n               return true;\r\n             }else{\r\n              message.error('Пароль не верный!');\r\n               return false;\r\n             }\r\n            }\r\n            return false;\r\n          }\r\n          if(storage.some(isAlive)){\r\n            localStorage.setItem('registraion', JSON.stringify(storage));\r\n            this.props.history.push('/checkers');\r\n          }\r\n          else {\r\n            message.error('Пользователя не существует');\r\n          }\r\n        }\r\n        else{\r\n          message.error('База пользователей пуста, пожалуйста зарегестрируйтесь!');\r\n        }\r\n      }\r\n              \r\n    });\r\n    \r\n  };\r\n  handeRegistration = () => {\r\n    this.props.history.push('/registration');\r\n  }\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    return (\r\n      <div className='content'>\r\n        <div className=\"d1\">Welcome</div>\r\n        <Form onSubmit={this.handleSubmit} className=\"login-form\" fun={this.props}>\r\n        <Form.Item>\r\n          {getFieldDecorator('username', {\r\n            rules: [{ required: true, message: 'Please input your username!' }],\r\n          })(\r\n            <Input\r\n              prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n              placeholder=\"Username\"\r\n            />,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item>\r\n          {getFieldDecorator('password', {\r\n            rules: [{ required: true, message: 'Please input your Password!' }],\r\n          })(\r\n            <Input\r\n              prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n            />,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" onClick={this.handeClick}>\r\n            Log in\r\n          </Button>\r\n          Or\r\n          <Button type=\"link\" onClick={this.handeRegistration}>\r\n          register now!\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n      \r\n      </div>\r\n     \r\n    );\r\n  }\r\n}\r\nconst WrappedNormalLoginForm = Form.create({ name: 'normal_login' })(NormalLoginForm);\r\nexport default WrappedNormalLoginForm;\r\n\r\n          ","import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport '../../App/css/registration.css';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n    Form,\r\n    Input,\r\n    Icon,\r\n    message,\r\n    Button,\r\n  } from 'antd'; \r\n  class RegistrationForm extends React.Component {\r\n\r\n    handleSubmit = e => {\r\n      e.preventDefault();\r\n      this.props.form.validateFieldsAndScroll((err, values) => {\r\n        if (!err) {\r\n          let Reg = JSON.parse(localStorage.getItem(\"registraion\"));\r\n          if(!Reg){\r\n            let temp = [];\r\n            values.isOnline = false;\r\n            delete values.confirm;\r\n            temp.push(values);\r\n            localStorage.setItem('registraion', JSON.stringify(temp));\r\n            message.success('Пользователь успешно зарегестрирован');\r\n            this.props.history.push('/login');\r\n          }\r\n          else{\r\n            function isAlive(val){\r\n              return val.email === values.email\r\n            }\r\n            if(!Reg.some(isAlive))\r\n              {\r\n              values.isOnline = false;\r\n              delete values.confirm;\r\n              Reg.push(values);\r\n              localStorage.setItem('registraion', JSON.stringify(Reg));\r\n              message.success('Пользователь успешно зарегестрирован');\r\n              this.props.history.push('/login');\r\n              }\r\n            else {\r\n              message.error('Пользователь уже зарегестрирован!');\r\n            }\r\n          }\r\n        }\r\n      });\r\n    };\r\n  \r\n    handleConfirmBlur = e => {\r\n      const value = e.target.value;\r\n      this.props.onChangeConfirmDirty(this.props.confirmDirty || !!value)\r\n      // this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n    };\r\n  \r\n    compareToFirstPassword = (rule, value, callback) => {\r\n      const form = this.props.form;\r\n      if (value && value !== form.getFieldValue('password')) {\r\n        callback('Two passwords that you enter is inconsistent!');\r\n      } else {\r\n        callback();\r\n      }\r\n    };\r\n  \r\n    validateToNextPassword = (rule, value, callback) => {\r\n      const form = this.props.form;\r\n      if (value && this.props.confirmDirty) {\r\n        form.validateFields(['confirm'], { force: true });\r\n      }\r\n      callback();\r\n    };\r\n\r\n    handleBack = () => {\r\n      this.props.history.goBack();\r\n    }\r\n    render() {\r\n      const { getFieldDecorator } = this.props.form;\r\n  \r\n      const formItemLayout = {\r\n        labelCol: {\r\n          xs: { span: 24 },\r\n          sm: { span: 8 },\r\n        },\r\n        wrapperCol: {\r\n          xs: { span: 24 },\r\n          sm: { span: 16 },\r\n        },\r\n      };\r\n      const tailFormItemLayout = {\r\n        wrapperCol: {\r\n          xs: {\r\n            span: 24,\r\n            offset: 0,\r\n          },\r\n          sm: {\r\n            span: 16,\r\n            offset: 8,\r\n          },\r\n        },\r\n      };\r\n      return (\r\n        <div className='content'>\r\n          <div className=\"d1\">Register</div>\r\n            <Form {...formItemLayout} onSubmit={this.handleSubmit}>\r\n          <Form.Item label=\"E-mail\">\r\n            {getFieldDecorator('email', {\r\n              rules: [\r\n                {\r\n                  type: 'email',\r\n                  message: 'The input is not valid E-mail!',\r\n                },\r\n                {\r\n                  required: true,\r\n                  message: 'Please input your E-mail!',\r\n                },\r\n              ],\r\n            })(<Input />)}\r\n          </Form.Item>\r\n          <Form.Item label=\"Password\" hasFeedback>\r\n            {getFieldDecorator('password', {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: 'Please input your password!',\r\n                },\r\n                {\r\n                  validator: this.validateToNextPassword,\r\n                },\r\n              ],\r\n            })(<Input.Password />)}\r\n          </Form.Item>\r\n          <Form.Item label=\"Confirm Password\" hasFeedback>\r\n            {getFieldDecorator('confirm', {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: 'Please confirm your password!',\r\n                },\r\n                {\r\n                  validator: this.compareToFirstPassword,\r\n                },\r\n              ],\r\n            })(<Input.Password onBlur={this.handleConfirmBlur} />)}\r\n          </Form.Item>\r\n          <Form.Item {...tailFormItemLayout} >\r\n            <div className='button_align'>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Register\r\n            </Button>\r\n            <Button type=\"danger\" onClick={this.handleBack}>\r\n              <Icon type=\"left\" />\r\n              Go back\r\n            </Button>\r\n            </div>\r\n            \r\n          </Form.Item>\r\n        </Form>\r\n        </div>\r\n        \r\n      );\r\n    }\r\n  }\r\n  \r\n  const WrappedRegistrationForm = Form.create({ name: 'register' })(RegistrationForm);\r\n  \r\n  export default connect(\r\n    state => ({\r\n      confirmDirty: state.confirmDirty,\r\n    }),\r\n    dispatch => ({ \r\n      onChangeConfirmDirty: (confirmDirty) => {\r\n        dispatch({type: 'CHANGE_CONFIRM_DIRTY', payload: confirmDirty});\r\n      }\r\n    })\r\n  )(WrappedRegistrationForm);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../css/indexGame.css';\r\n\r\nclass Checkers extends React.Component {\r\n\r\n    transferMove = (props) => { // фун-я проверяет поле, и записывает возможные ходы перед началом хода каждого из играков\r\n        let result = this.checkAllCheckers([props[0], props[1]]); //проверка всех шашек для определенного игрока\r\n        if (result[0].length !== 0) {// если обязательный бой есть\r\n            this.props.onChangeOnlyClickFirst(result);\r\n            this.props.onChangeBattleIs(true);\r\n        }else if(result[1] === false){\r\n           alert('Конец игры, ' + props[1]  + ' игрок проиграл!');\r\n        }\r\n    }\r\n\r\n    handleClick = (i, j) => {\r\n        let tempGrid = JSON.parse(JSON.stringify(this.props.array)), checker = tempGrid[i][j].checkerType, colorReproduced = this.props.colorReproduced,\r\n            flagChose = ((checker === 'whiteType' || checker === 'whiteQeen') && colorReproduced === 'white') || ((checker === 'blackType' || checker === 'blackQeen') && colorReproduced === 'black');\r\n        // const flagChose = ((this.props.colorReproduced === 'white' && tempGrid[i][j].checkerType === 'whiteType') ||\r\n        //     (this.props.colorReproduced === 'black' && tempGrid[i][j].checkerType === 'blackType'));\r\n        if (tempGrid[i][j].checkerType !== undefined) {\r\n            let result = this.calculationMovesChecker([tempGrid, i, j]);\r\n            if (this.props.pressToMove.cutOut.length === 0) {//первый клик\r\n                if (flagChose) {\r\n                    if (this.props.battleIs) {// если есть обязательный бой\r\n                        let flag = result.tempForBattle.length !== 0;\r\n                        if (flag) {\r\n                            result.tempForBattle.forEach(item => {\r\n                                if (item.whoBattle[0] === +i && item.whoBattle[1] === +j) {\r\n                                    // console.log(item);\r\n                                    if (typeof(item.checkersMoveInThis[0]) === 'number') {\r\n                                        tempGrid[item.checkersMoveInThis[0]][item.checkersMoveInThis[1]].click = 'checkerClick';\r\n                                    } else {\r\n                                        item.checkersMoveInThis.forEach(keys => {\r\n                                            console.log('данные о бое', item.checkersMoveInThis, keys);\r\n                                            tempGrid[keys[0]][keys[1]].click = 'checkerClick';\r\n                                        })\r\n                                    }\r\n                                }\r\n                            })\r\n                            tempGrid[i][j].click = 'checkerClick';\r\n                            this.props.onChangeSelectedCheckers([+i, +j]);\r\n                            this.props.onChangeClickCheckers(this.filterObject(tempGrid));\r\n                            this.saveChanges(tempGrid);\r\n\r\n                            this.props.onChangePressToMove({\r\n                                cutOut: [i, j],\r\n                                insert: [],\r\n                            })\r\n                        } else {\r\n                            alert('Бой обязателен');\r\n                        }\r\n                    } else { // если обязательного боя нету\r\n                        this.calculationPossibleMoves([tempGrid, i, j]);\r\n                        this.props.onChangePressToMove({\r\n                            cutOut: [i, j],\r\n                            insert: []\r\n                        })\r\n                    }\r\n                } else { // если кликнули не на шашку\r\n                    alert('Выбирите пожалуйста шашку своего цвета');\r\n                }\r\n            } else { //второй клик\r\n                let flag = tempGrid[i][j].click === 'checkerClick';\r\n                if (!flag && flagChose) {\r\n                    if (this.props.battleIs && result.tempForBattle.length !== 0) {\r\n                        for (let key in tempGrid) {\r\n                            for (let key2 in tempGrid[key]) {\r\n                                if (tempGrid[key][key2].color !== 'white') {\r\n                                    tempGrid[key][key2].click = '';\r\n                                }\r\n                            }\r\n                        }\r\n                        result.tempForBattle.forEach(item => {\r\n                            if (item.whoBattle[0] === +i && item.whoBattle[1] === +j) {\r\n                                if (typeof(item.checkersMoveInThis[0]) === 'number') {\r\n                                    tempGrid[item.checkersMoveInThis[0]][item.checkersMoveInThis[1]].click = 'checkerClick';\r\n                                } else {\r\n                                    item.checkersMoveInThis.forEach(keys => {\r\n                                        tempGrid[keys[0]][keys[1]].click = 'checkerClick';\r\n                                    })\r\n                                }\r\n                            }\r\n                            // if (item.whoBattle[0] === +i && item.whoBattle[1] === +j) {\r\n                            //     tempGrid[item.checkersMoveInThis[0]][item.checkersMoveInThis[1]].click = 'checkerClick';\r\n                            // }\r\n                            // if (typeof(item.checkersMoveInThis[0]) === 'number') {\r\n                            //     tempGrid[item.checkersMoveInThis[0]][item.checkersMoveInThis[1]].click = 'checkerClick';\r\n                            // } else {\r\n                            //     item.checkersMoveInThis.forEach(keys => {\r\n                            //         tempGrid[item.checkersMoveInThis[keys[0]]][item.checkersMoveInThis[keys[1]]].click = 'checkerClick';\r\n                            //     })\r\n                            // }\r\n                        })\r\n                        tempGrid[i][j].click = 'checkerClick';\r\n                        this.props.onChangeSelectedCheckers([+i, +j]);\r\n                        this.props.onChangeClickCheckers(this.filterObject(tempGrid));\r\n                        this.saveChanges(tempGrid);\r\n\r\n                        this.props.onChangePressToMove({\r\n                            cutOut: [i, j],\r\n                            insert: [],\r\n                        })\r\n                    } else if (!(this.props.battleIs)) {\r\n                        this.calculationPossibleMoves([tempGrid, i, j]);\r\n                        this.props.onChangePressToMove({\r\n                            cutOut: [i, j],\r\n                            insert: []\r\n                        })\r\n                    }\r\n                } else if (flag) {\r\n                    let result2 = this.calculationMovesChecker([tempGrid, this.props.pressToMove.cutOut[0], this.props.pressToMove.cutOut[1]]);\r\n                    if (this.props.pressToMove.cutOut[0] !== i && this.props.pressToMove.cutOut[1] !== j) {\r\n                        this.moveCheckers({//вызываем функию передавая координату куда переместить шашку\r\n                            cutOut: this.props.pressToMove.cutOut,\r\n                            insert: [i, j],\r\n                            infoBattle: result2.tempForBattle\r\n                        });\r\n                    }\r\n                } else if (!flag) {\r\n                    alert('Вы нажали не туда');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // handleClick = (i, j) => {\r\n    //     let tempGrid = JSON.parse(JSON.stringify(this.props.array));\r\n    //     const flagChose = ((this.props.colorReproduced === 'white' && tempGrid[i][j].checkerType === 'whiteQeen') || (this.props.colorReproduced === 'black' && tempGrid[i][j].checkerType === 'blackQeen'));\r\n    //     if (tempGrid[i][j].checkerType !== undefined) {\r\n    //         // let result = this.calculationMovesChecker([tempGrid, i, j]);\r\n    //         if (this.props.pressToMove.cutOut.length === 0 && flagChose) {//первый клик\r\n    //             let result = this.calculationPossibleMoves([tempGrid, i, j]);\r\n    //             this.props.onChangeInfoCheckersForBattle(result.tempForBattle);\r\n    //             this.props.onChangePressToMove({\r\n    //                 cutOut: [i, j],\r\n    //                 insert: [],\r\n    //             })\r\n    //         } else {\r\n    //             //  ('second click', result);\r\n    //             this.moveCheckers({//вызываем функию передавая координату куда переместить шашку\r\n    //                 cutOut: this.props.pressToMove.cutOut,\r\n    //                 insert: [i, j],\r\n    //                 infoBattle: this.props.infoChekersForBattle\r\n    //             });\r\n    //         }\r\n\r\n    //     }\r\n    // }\r\n\r\n    saveChanges = (props) => {\r\n        this.props.onChangeGridArray(props);\r\n        this.renderGrid(props);\r\n    }\r\n\r\n    setDiagonals = (props) => {\r\n        //  ('diago');\r\n        //  (props);\r\n        let tempGrid = JSON.parse(JSON.stringify(props)), diagonals = this.props.diagonals;\r\n        for (let key in tempGrid) {\r\n            for (let key2 in tempGrid[key]) {\r\n                if (tempGrid[key][key2].checkerType !== 'noneChecker' && tempGrid[key][key2].checkerType !== 'none') {\r\n                    // if (tempGrid[key][key2].checkerType === 'whiteType' || tempGrid[key][key2].checkerType === 'blackType') {\r\n                    tempGrid[key][key2].onDiagonals = [];\r\n                    for (let diag in diagonals) {\r\n                        diagonals[diag].forEach(keys => {\r\n                            if (keys[0] === +key && keys[1] === +key2) {\r\n                                tempGrid[key][key2].onDiagonals.push(diag);\r\n                            }\r\n                        });\r\n                    }\r\n                    // }\r\n                }\r\n            }\r\n        }\r\n        this.saveChanges(tempGrid);\r\n    }\r\n\r\n    moveCheckers = (props) => {\r\n        //получаем данные о шашке, откуда и куда переместить\r\n        let tempGrid = JSON.parse(JSON.stringify(this.props.array)), x1 = +props.cutOut[0], x2 = +props.insert[0],\r\n            y1 = +props.cutOut[1], y2 = +props.insert[1];\r\n        let flag = false;\r\n        //убираем шашку которая была побита\r\n        let infoBattle = props.infoBattle;\r\n        console.log('battle in this', infoBattle);\r\n        for (let key in infoBattle) {\r\n            console.log(typeof (infoBattle[key].checkersMoveInThis[0]));\r\n            if (typeof (infoBattle[key].checkersMoveInThis[0]) === 'number') {\r\n                if (infoBattle[key].checkersMoveInThis[0] === x2 && infoBattle[key].checkersMoveInThis[1] === y2) {\r\n                    tempGrid[infoBattle[key].checkersLose[0]][infoBattle[key].checkersLose[1]].checkerType = 'none';\r\n                    flag = true;\r\n                }\r\n            } else {\r\n                infoBattle[key].checkersMoveInThis.forEach(item => {\r\n                    if (item[0] === x2 && item[1] === y2) {\r\n                        tempGrid[infoBattle[key].checkersLose[0]][infoBattle[key].checkersLose[1]].checkerType = 'none';\r\n                        flag = true;\r\n                    }\r\n                })\r\n            }\r\n            infoBattle[key].checkersMoveInThis.forEach(item => {\r\n                if (item[0] === x2 && item[1] === y2) {\r\n                    tempGrid[infoBattle[key].checkersLose[0]][infoBattle[key].checkersLose[1]].checkerType = 'none';\r\n                    flag = true;\r\n                }\r\n            })\r\n\r\n        }\r\n        //очищаем выдиление\r\n        for (let key in tempGrid) {\r\n            for (let key2 in tempGrid[key]) {\r\n                if (tempGrid[key][key2].color !== 'white') {\r\n                    tempGrid[key][key2].click = '';\r\n                }\r\n            }\r\n        }\r\n        //перемещаем шашку\r\n        // console.log('move', tempGrid[x2][y2], x2);\r\n        if (tempGrid[x1][y1].checkerType === 'whiteType' && x2 === 3) {\r\n            tempGrid[x2][y2].checkerType = 'whiteQeen';\r\n        } else if (tempGrid[x1][y1].checkerType === 'blackType' && x2 === 10) {\r\n            tempGrid[x2][y2].checkerType = 'blackQeen';\r\n        } else {\r\n            tempGrid[x2][y2].checkerType = tempGrid[x1][y1].checkerType;\r\n        }\r\n        tempGrid[x1][y1].checkerType = 'none';\r\n        //если был бой\r\n        if (flag) {\r\n            let result = this.calculationMovesChecker([tempGrid, x2, y2]);\r\n            if (result.tempForBattle.length === 0) {//если для шашки котора ходила, нету возможности еще раз бить, передаем ход\r\n                this.props.onChangeColorReproduced((this.props.colorReproduced === 'white') ? 'black' : 'white');\r\n                this.props.onChangeInfoCheckersForBattle([]);\r\n                //очищаем масив передвижений\r\n                this.props.onChangePressToMove({\r\n                    cutOut: [],\r\n                    insert: []\r\n                });\r\n                this.props.onChangeBattleIs(false);\r\n                this.transferMove([tempGrid, (this.props.colorReproduced === 'white') ? 'black' : 'white']);\r\n            } else { // если возможность бить есть, то делаем второй ход\r\n                this.props.onChangePressToMove({\r\n                    cutOut: [x2, y2],\r\n                    insert: []\r\n                });\r\n                this.props.onChangeSelectedCheckers([x2, y2]);\r\n            }\r\n        } else { // если боя небыло передаем ход\r\n            this.props.onChangeColorReproduced((this.props.colorReproduced === 'white') ? 'black' : 'white');\r\n            this.props.onChangeInfoCheckersForBattle([]);\r\n            //очищаем масив передвижений\r\n            this.props.onChangePressToMove({\r\n                cutOut: [],\r\n                insert: []\r\n            });\r\n            this.props.onChangeBattleIs(false);\r\n            this.transferMove([tempGrid, (this.props.colorReproduced === 'white') ? 'black' : 'white']);\r\n        }\r\n        this.saveChanges(tempGrid);\r\n        this.setDiagonals(tempGrid);\r\n    }\r\n\r\n    filterObject = (object) => {\r\n        var result = [], key1, key2;\r\n        for (key1 in object) {\r\n            for (key2 in object[key1]) {\r\n                if (object[key1][key2].click === 'checkerClick')\r\n                    result.push([key1, key2]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    calculationMovesChecker = (props) => {//функция выщитывает возможные ходы для выбраной шашки\r\n        let tempGrid = JSON.parse(JSON.stringify(props[0])),\r\n            i = +props[1],\r\n            j = +props[2],\r\n            tempMain = [],\r\n            tempForBattle = [],\r\n            flag = false,\r\n            x = i,\r\n            y = j,\r\n            colorCheckers = tempGrid[i][j].checkerType,\r\n            colorBattleCheckers = (colorCheckers === 'blackQeen' || colorCheckers === 'blackType') ? ['whiteType', 'whiteQeen'] : ['blackType', 'blackQeen'];\r\n\r\n        for (let key in tempGrid) {\r\n            for (let key2 in tempGrid[key]) {\r\n                if (tempGrid[key][key2].color !== 'white') {//если цвет клетки не белый, то очистить нажатие\r\n                    tempGrid[key][key2].click = '';\r\n                }\r\n            }\r\n        }\r\n\r\n        if (colorCheckers === 'blackQeen' || colorCheckers === 'whiteQeen') {\r\n            for (var iterat = 1; iterat <= 4; iterat++) {\r\n                let temp = [];\r\n                switch (iterat) {\r\n                    case 1: { //верхний правый\r\n                        x -= 1;\r\n                        y += 1;\r\n                        while (tempGrid[x][y].checkerType !== 'noneChecker') {\r\n                            if (tempGrid[x][y].checkerType === 'none') {\r\n                                temp.push([x, y]);\r\n                            } else if (tempGrid[x][y].checkerType === colorBattleCheckers[0] || tempGrid[x][y].checkerType === colorBattleCheckers[1]) {\r\n                                if (tempGrid[x - 1][y + 1].checkerType === 'none') {\r\n                                    let x2 = x - 2, y2 = y + 2, MoveInThisForBattle = [[x - 1, y + 1]];\r\n                                    while (tempGrid[x2][y2].checkerType !== 'noneChecker') {\r\n                                        if (tempGrid[x2][y2].checkerType === 'none') {\r\n                                            MoveInThisForBattle.push([x2, y2]);\r\n                                        } else {\r\n                                            break;\r\n                                        }\r\n                                        x2 -= 1;\r\n                                        y2 += 1;\r\n                                    }\r\n                                    tempForBattle.push({\r\n                                        whoBattle: [i, j],\r\n                                        checkersLose: [x, y],\r\n                                        checkersMoveInThis: MoveInThisForBattle\r\n                                    });\r\n                                } else {\r\n                                    break;\r\n                                }\r\n                            } else {\r\n                                break;\r\n                            }\r\n\r\n                            x -= 1;\r\n                            y += 1;\r\n                        }\r\n                        break;\r\n                    }\r\n                    case 2: { //верхний левый\r\n                        x -= 1;\r\n                        y -= 1;\r\n                        while (tempGrid[x][y].checkerType !== 'noneChecker') {\r\n                            if (tempGrid[x][y].checkerType === 'none') {\r\n                                temp.push([x, y]);\r\n                            } else if (tempGrid[x][y].checkerType === colorBattleCheckers[0] || tempGrid[x][y].checkerType === colorBattleCheckers[1]) {\r\n                                if (tempGrid[x - 1][y - 1].checkerType === 'none') {\r\n                                    let x2 = x - 2, y2 = y - 2, MoveInThisForBattle = [[x - 1, y - 1]];\r\n                                    while (tempGrid[x2][y2].checkerType !== 'noneChecker') {\r\n                                        if (tempGrid[x2][y2].checkerType === 'none') {\r\n                                            MoveInThisForBattle.push([x2, y2]);\r\n                                        } else {\r\n                                            break;\r\n                                        }\r\n                                        x2 -= 1;\r\n                                        y2 -= 1;\r\n                                    }\r\n                                    tempForBattle.push({\r\n                                        whoBattle: [i, j],\r\n                                        checkersLose: [x, y],\r\n                                        checkersMoveInThis: MoveInThisForBattle\r\n                                    });\r\n                                } else {\r\n                                    break;\r\n                                }\r\n                            } else {\r\n                                break;\r\n                            }\r\n                            x -= 1;\r\n                            y -= 1;\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                    case 3: { //нижний правый\r\n                        x += 1;\r\n                        y += 1;\r\n                        while (tempGrid[x][y].checkerType !== 'noneChecker') {\r\n                            if (tempGrid[x][y].checkerType === 'none') {\r\n                                temp.push([x, y]);\r\n                            } else if (tempGrid[x][y].checkerType === colorBattleCheckers[0] || tempGrid[x][y].checkerType === colorBattleCheckers[1]) {\r\n                                if (tempGrid[x + 1][y + 1].checkerType === 'none') {\r\n                                    let x2 = x + 2, y2 = y + 2, MoveInThisForBattle = [[x + 1, y + 1]];\r\n                                    while (tempGrid[x2][y2].checkerType !== 'noneChecker') {\r\n                                        if (tempGrid[x2][y2].checkerType === 'none') {\r\n                                            MoveInThisForBattle.push([x2, y2]);\r\n                                        } else {\r\n                                            break;\r\n                                        }\r\n                                        x2 += 1;\r\n                                        y2 += 1;\r\n                                    }\r\n                                    tempForBattle.push({\r\n                                        whoBattle: [i, j],\r\n                                        checkersLose: [x, y],\r\n                                        checkersMoveInThis: MoveInThisForBattle\r\n                                    });\r\n                                } else {\r\n                                    break;\r\n                                }\r\n                            } else {\r\n                                break;\r\n                            }\r\n                            x += 1;\r\n                            y += 1;\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                    case 4: { //нижний левый\r\n                        x += 1;\r\n                        y -= 1;\r\n                        while (tempGrid[x][y].checkerType !== 'noneChecker') {\r\n                            if (tempGrid[x][y].checkerType === 'none') {\r\n                                temp.push([x, y]);\r\n                            } else if (tempGrid[x][y].checkerType === colorBattleCheckers[0] || tempGrid[x][y].checkerType === colorBattleCheckers[1]) {\r\n                                if (tempGrid[x + 1][y - 1].checkerType === 'none') {\r\n                                    let x2 = x + 2, y2 = y - 2, MoveInThisForBattle = [[x + 1, y - 1]];\r\n                                    while (tempGrid[x2][y2].checkerType !== 'noneChecker') {\r\n                                        if (tempGrid[x2][y2].checkerType === 'none') {\r\n                                            MoveInThisForBattle.push([x2, y2]);\r\n                                        } else {\r\n                                            break;\r\n                                        }\r\n                                        x2 += 1;\r\n                                        y2 -= 1;\r\n                                    }\r\n                                    tempForBattle.push({\r\n                                        whoBattle: [i, j],\r\n                                        checkersLose: [x, y],\r\n                                        checkersMoveInThis: MoveInThisForBattle\r\n                                    });\r\n                                } else {\r\n                                    break;\r\n                                }\r\n                            } else {\r\n                                break;\r\n                            }\r\n\r\n                            x += 1;\r\n                            y -= 1;\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                    default:\r\n                        continue;\r\n                }\r\n                flag = false;\r\n                x = i;\r\n                y = j;\r\n                temp.forEach(key3 => { tempMain.push(key3) });\r\n            }\r\n\r\n        } else {\r\n            tempGrid[i][j].onDiagonals.forEach(key => {//выбираем диагонали на которых стоит шашка\r\n                let temp = [];\r\n                if (colorCheckers === 'blackType' || colorCheckers === 'whiteType') {\r\n\r\n                    temp = this.props.diagonals[key].filter(item => {//скорочуємо до 2 кліток з різних боків, для звичайних шашок\r\n                        if (Math.abs(item[0] - i) <= 2 && Math.abs(item[1] - j) <= 2)\r\n                            return true;\r\n                        return false;\r\n                    })\r\n\r\n                    temp = temp.filter(item => { //прибираємо всі місця де вже є шашки\r\n                        if (tempGrid[item[0]][item[1]].checkerType === 'none')\r\n                            return true;\r\n                        return false;\r\n                    });\r\n                    //  (temp);\r\n                    temp = temp.filter(item => {// проходим по координатам диагоналей, проверяя их как потенциальное место для хода\r\n                        const I = item[0], J = item[1];\r\n                        if (I === i && J === j) {\r\n                            return false;\r\n                        } else if (I === (i - 1) && J === (j - 1)) {\r\n                            if (colorCheckers === 'whiteType') {\r\n                                if ((tempGrid[I][J].checkerType === 'blackType' || tempGrid[I][J].checkerType === 'blackQeen') && tempGrid[I - 1][J - 1].checkerType === 'none') {\r\n                                    return false;\r\n                                } else {\r\n                                    return true;\r\n                                }\r\n                            } else {\r\n                                return false;\r\n                            }\r\n\r\n                        } else if (I === (i - 1) && J === (j + 1)) {\r\n                            if (colorCheckers === 'whiteType') {\r\n                                if ((tempGrid[I][J].checkerType === 'blackType' || tempGrid[I][J].checkerType === 'blackQeen') && tempGrid[I - 1][J + 1].checkerType === 'none') {\r\n                                    return false;\r\n                                } else {\r\n                                    return true;\r\n                                }\r\n                            } else {\r\n                                return false;\r\n                            }\r\n\r\n                        } else if (I === (i + 1) && J === (j + 1)) {\r\n                            if (colorCheckers === 'blackType') {\r\n                                if ((tempGrid[I][J].checkerType === 'whiteType' || tempGrid[I][J].checkerType === 'whiteQeen') && tempGrid[I + 1][J + 1].checkerType === 'none') {\r\n                                    return false;\r\n                                } else {\r\n                                    return true;\r\n                                }\r\n                            } else {\r\n                                return false;\r\n                            }\r\n                        } else if (I === (i + 1) && J === (j - 1)) {\r\n                            if (colorCheckers === 'blackType') {\r\n                                if ((tempGrid[I][J].checkerType === 'whiteType' || tempGrid[I][J].checkerType === 'whiteQeen') && tempGrid[I + 1][J - 1].checkerType === 'none') {\r\n                                    // tempForWhite.push(item);\r\n                                    return false;\r\n                                } else {\r\n                                    return true;\r\n                                }\r\n                            } else {\r\n                                return false;\r\n                            }\r\n                        } else if (I === (i - 2) && J === (j - 2)) {\r\n                            if (tempGrid[I][J].checkerType === 'none' && (tempGrid[I + 1][J + 1].checkerType === colorBattleCheckers[0] || tempGrid[I + 1][J + 1].checkerType === colorBattleCheckers[1])) {\r\n                                tempForBattle.push({\r\n                                    whoBattle: [i, j],\r\n                                    checkersLose: [I + 1, J + 1],\r\n                                    checkersMoveInThis: [I, J]\r\n                                });\r\n                                return true;\r\n                            } else {\r\n                                return false;\r\n                            }\r\n                        } else if (I === (i - 2) && J === (j + 2)) {\r\n                            if (tempGrid[I][J].checkerType === 'none' && (tempGrid[I + 1][J - 1].checkerType === colorBattleCheckers[0] || tempGrid[I + 1][J - 1].checkerType === colorBattleCheckers[1])) {\r\n                                tempForBattle.push({\r\n                                    whoBattle: [i, j],\r\n                                    checkersLose: [I + 1, J - 1],\r\n                                    checkersMoveInThis: [I, J]\r\n                                });\r\n                                return true;\r\n                            } else {\r\n                                return false;\r\n                            }\r\n                        } else if (I === (i + 2) && J === (j + 2)) {\r\n                            if (tempGrid[I][J].checkerType === 'none' && (tempGrid[I - 1][J - 1].checkerType === colorBattleCheckers[0] || tempGrid[I - 1][J - 1].checkerType === colorBattleCheckers[1])) {\r\n                                tempForBattle.push({\r\n                                    whoBattle: [i, j],\r\n                                    checkersLose: [I - 1, J - 1],\r\n                                    checkersMoveInThis: [I, J]\r\n                                });\r\n                                return true;\r\n                            } else {\r\n                                return false;\r\n                            }\r\n                        } else if (I === (i + 2) && J === (j - 2)) {\r\n                            if (tempGrid[I][J].checkerType === 'none' && (tempGrid[I - 1][J + 1].checkerType === colorBattleCheckers[0] || tempGrid[I - 1][J + 1].checkerType === colorBattleCheckers[1])) {\r\n                                tempForBattle.push({\r\n                                    whoBattle: [i, j],\r\n                                    checkersLose: [I - 1, J + 1],\r\n                                    checkersMoveInThis: [I, J]\r\n                                });\r\n                                return true;\r\n                            } else {\r\n                                return false;\r\n                            }\r\n                        }\r\n                        return false;\r\n                    });\r\n                }\r\n                temp.forEach(item => { tempMain.push(item) });\r\n\r\n            })\r\n        }\r\n        return {\r\n            temp: tempMain,\r\n            tempForBattle,\r\n            tempGrid\r\n        };\r\n    }\r\n\r\n    checkAllCheckers = (props) => {\r\n        let tempValue = [], flag = false;\r\n        const tempGrid = props[0], color = (props[1] === 'white') ? ['whiteType', 'whiteQeen'] : ['blackType', 'blackQeen'];\r\n        //  ('tempGrid', tempGrid, color);\r\n        for (var key in tempGrid) {\r\n            for (var key2 in tempGrid[key]) {\r\n                if (tempGrid[key][key2].checkerType === color[0] || tempGrid[key][key2].checkerType === color[1]) {\r\n                    let temp = this.calculationMovesChecker([tempGrid, key, key2]);\r\n                    if(temp.temp.length !== 0){\r\n                        flag = true;\r\n                    }\r\n                    temp.tempForBattle.forEach(item => {\r\n                        tempValue.push(item);\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        return [tempValue, flag];\r\n    }\r\n\r\n    calculationPossibleMoves = (props) => {//фун-я вычисления возможных ходов для выбраной шашки\r\n        let result = this.calculationMovesChecker([props[0], props[1], props[2]]);\r\n        let tempGrid = JSON.parse(JSON.stringify(result.tempGrid)), i = props[1], j = props[2];\r\n        result.temp.forEach(keys => {\r\n            tempGrid[keys[0]][keys[1]].click = 'checkerClick';\r\n        })\r\n        this.props.onChangeSelectedCheckers([+i, +j]);\r\n        this.props.onChangeClickCheckers(this.filterObject(tempGrid));\r\n        this.saveChanges(tempGrid);\r\n        return result;\r\n    }\r\n\r\n    renderGrid = (props) => {\r\n        var renderGrid = [];\r\n        let tempGrid = JSON.parse(JSON.stringify(props));\r\n        for (var key in tempGrid) {\r\n            for (var key2 in tempGrid[key]) {\r\n                if (tempGrid[key][key2].checkerType !== 'noneChecker') {\r\n                    const i = key, j = key2;\r\n                    renderGrid.push(<div\r\n                        className={tempGrid[key][key2].color + \" \" + tempGrid[key][key2].checkerType + \" \" + tempGrid[key][key2].click}\r\n                        key={key + \" \" + key2}\r\n                        onClick={() => { this.handleClick(i, j) }}\r\n                    />);\r\n                }\r\n            }\r\n        }\r\n        this.props.onChangeRenderArray(renderGrid);\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.setDiagonals(this.props.array);\r\n        this.renderGrid(this.props.array);\r\n        // this.transferMove([this.props.array, 'white']);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='gridCheckers'>\r\n                <div className=\"someText\">\r\n                    Checkers<br />\r\n                    Ход : {this.props.colorReproduced}\r\n                </div>\r\n                <div className='centerAlign'>\r\n                    {this.props.renderGrid}\r\n                </div>\r\n                <div className='someText'>\r\n                    Developed by Adm1ral_den\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connect(\r\n\r\n    state => ({\r\n        array: state.grid.array,\r\n        renderGrid: state.grid.renderGrid,\r\n        selectedCheckers: state.grid.selectCheckers,\r\n        colorReproduced: state.grid.colorReproduced,\r\n        pressToMove: state.grid.pressToMove,\r\n        onlyClickThisCheckers: state.grid.onlyClickThisCheckers,\r\n        diagonals: state.grid.diagonals,\r\n        infoChekersForBattle: state.grid.infoChekersForBattle,\r\n        battleIs: state.grid.battleIs,\r\n        onlyClickFirstCheckersInThis: state.grid.onlyClickFirstCheckersInThis\r\n    }),\r\n\r\n    dispatch => ({\r\n        onChangeOnlyClickFirst: (value) => {\r\n            dispatch({ type: 'CHANGE_ONLY_CLICK_FIRST', array: value });\r\n        },\r\n        onChangeBattleIs: (value) => {\r\n            dispatch({ type: 'CHANGE_BATTLE_IS', value: value });\r\n        },\r\n        onChangeGridArray: (array) => {\r\n            dispatch({ type: 'CHANGE_ARRAY_GRID', array: array });\r\n        },\r\n        onChangeRenderArray: (array) => {\r\n            dispatch({ type: 'CHANGE_RENDER_GRID', array: array })\r\n        },\r\n        onChangeSelectedCheckers: (value) => {\r\n            dispatch({ type: 'CHANGE_SELECTED_CHECKERS', value: value })\r\n        },\r\n        onChangePressToMove: (objectValue) => {\r\n            dispatch({ type: 'CHANGE_PRESS_TO_MOVE', pressToMove: objectValue })\r\n        },\r\n        onChangeColorReproduced: (color) => {\r\n            dispatch({ type: 'CHANGE_COLOR_REPRODUCED', colorReproduced: color })\r\n        },\r\n        onChangeClickCheckers: (object) => {\r\n            dispatch({ type: 'CHANGE_CLICK_CHECKERS', objectCheckers: object })\r\n        },\r\n        onChangeInfoCheckersForBattle: (object) => {\r\n            dispatch({ type: 'CHANGE_INFO_CHECKERS_FOR_BATTLE', infoChekersForBattle: object })\r\n        },\r\n    })\r\n\r\n)(Checkers);","\r\nimport React from 'react';\r\nimport { Route, HashRouter } from \"react-router-dom\";\r\n\r\nimport 'antd/dist/antd.css';\r\nimport Login from '../loginAndAuthorize/login';\r\nimport Registration from '../loginAndAuthorize/registration';\r\nimport Game from '../game/index';\r\n\r\nclass App extends React.Component {\r\n  render() {      \r\n    return (\r\n      <HashRouter >\r\n            <Route path=\"/login\" exact component={Login} />\r\n            <Route path=\"/checkers\" exact component={Game} />\r\n            <Route path=\"/\" exact component={Login} />\r\n            <Route path=\"/registration\" exact component={Registration} />\r\n      </HashRouter>\r\n\r\n    );\r\n  }\r\n}\r\n  export default App;","import React from 'react';\r\nimport ReactDOM  from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\n\r\nimport './App/css/index.css';\r\nimport reducer from './App/reducer/index';\r\nimport Menu from './App/menus/menus';\r\n\r\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION__()); // передається функція\r\n \r\nReactDOM.render(\r\n  <Provider store = {store}>\r\n    <Menu /> \r\n  </Provider>,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}